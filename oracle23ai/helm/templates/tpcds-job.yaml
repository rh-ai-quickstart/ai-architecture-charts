{{/*
TPC-DS Data Population Job - Minimal Clean Implementation
*/}}
{{- if .Values.tpcds.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "oracle23ai.fullname" . }}-tpcds-populate
  labels:
    {{- include "oracle23ai.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "10"
spec:
  backoffLimit: 2
  activeDeadlineSeconds: 3600
  template:
    metadata:
      labels:
        {{- include "oracle23ai.selectorLabels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "oracle23ai.serviceAccountName" . }}
      
      initContainers:
      # Wait for Oracle to be ready - simplified and secure
      - name: wait-for-oracle
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "üîç Waiting for Oracle database to be ready..."
          
          # Simple, secure wait for Oracle port availability
          WAIT_TIME=0
          MAX_WAIT=600  # 10 minutes maximum for Oracle initialization
          
          while [ $WAIT_TIME -lt $MAX_WAIT ]; do
            if nc -z {{ include "oracle23ai.fullname" . }} {{ .Values.service.port }}; then
              echo "‚úÖ Oracle port accessible"
              # Additional stabilization time for FREEPDB1 (increased for reliability)
              echo "‚è≥ Allowing time for Oracle FREEPDB1 initialization (180s)..."
              sleep 180
              echo "‚úÖ Oracle should be ready for connections"
              break
            fi
            
            echo "   Oracle not ready yet, waiting... (${WAIT_TIME}s elapsed)"
            sleep 10
            WAIT_TIME=$((WAIT_TIME + 10))
          done
          
          if [ $WAIT_TIME -ge $MAX_WAIT ]; then
            echo "‚ö†Ô∏è  Oracle initialization timeout after ${MAX_WAIT}s"
            exit 1
          fi
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"

      # Create TPC-DS user securely without kubectl
      - name: create-tpcds-user
        image: "quay.io/rhkp/tpcds-util:latest"
        imagePullPolicy: Always
        command: ["/bin/bash", "-c"]
        args:
        - |
          echo "üë§ Creating TPC-DS user securely..."
          
          # Set writable HOME directory
          export HOME=/tmp
          
          # Configure tpcds-util to use SYSDBA connection for user creation
          echo "üîê Configuring secure user creation..."
          tpcds-util config set \
            --host "{{ include "oracle23ai.fullname" . }}" \
            --port "{{ .Values.service.port }}" \
            --service-name "FREEPDB1" \
            --username "system" \
            --password "${ORACLE_PWD}"
          
          # Test SYSDBA connection
          echo "üîå Testing SYSDBA connection..."
          if ! tpcds-util db test; then
            echo "‚ùå Cannot connect as SYSTEM user"
            exit 1
          fi
          
          # Create TPCDS user using tpcds-util's secure method
          echo "üì® Creating TPCDS user via secure Oracle connection..."
          
          # Use Python script to create user securely
          python3 << 'PYTHON_EOF'
          import os
          import oracledb
          
          try:
              # Connect as SYSTEM to create user
              password = os.getenv('ORACLE_PWD')
              tpcds_password = os.getenv('TPCDS_DB_PASSWORD')
              
              connection = oracledb.connect(
                  user="system",
                  password=password,
                  dsn="{{ include "oracle23ai.fullname" . }}:{{ .Values.service.port }}/FREEPDB1"
              )
              connection.autocommit = True
              
              with connection.cursor() as cursor:
                  # Check if user exists
                  cursor.execute("SELECT COUNT(*) FROM dba_users WHERE username = 'TPCDS'")
                  user_count = cursor.fetchone()[0]
                  
                  if user_count == 0:
                      print("Creating TPCDS user...")
                      cursor.execute(f"CREATE USER tpcds IDENTIFIED BY \"{tpcds_password}\"")
                      print("‚úÖ TPCDS user created")
                  else:
                      print("‚ö†Ô∏è  TPCDS user already exists")
                  
                  # Grant privileges
                  privileges = ["CREATE SESSION", "CREATE TABLE", "UNLIMITED TABLESPACE"]
                  for privilege in privileges:
                      try:
                          cursor.execute(f"GRANT {privilege} TO tpcds")
                      except:
                          pass
                  
                  print("‚úÖ Privileges granted to TPCDS user")
              
              connection.close()
              
          except Exception as e:
              print(f"‚ùå Error creating user: {e}")
              exit(1)
          PYTHON_EOF
          
          echo "‚úÖ TPC-DS user creation completed"
        
        env:
        - name: ORACLE_PWD
          valueFrom:
            secretKeyRef:
              name: {{ include "oracle23ai.fullname" . }}
              key: password
        - name: TPCDS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "oracle23ai.fullname" . }}
              key: {{ .Values.tpcds.username }}_password
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

      containers:
      - name: tpcds-populate
        image: "quay.io/rhkp/tpcds-util:latest"
        imagePullPolicy: Always
        command: ["/bin/bash", "-c"]
        args:
        - |
          set -e
          echo "üöÄ Starting TPC-DS data population job"
          echo "   Target: {{ .Values.tpcds.schemaName }} schema"
          echo "   Scale Factor: {{ .Values.tpcds.scaleFactor }}"
          echo ""
          
          # Set writable HOME directory for tpcds-util config
          export HOME=/tmp
          
          # Configure tpcds-util with actual parameters  
          echo "‚öôÔ∏è Configuring TPC-DS utility..."
          tpcds-util config set \
            --host "${DB_HOST}" \
            --port "${DB_PORT}" \
            --service-name "${DB_SERVICE}" \
            --username "${DB_USERNAME}" \
            --password "${TPCDS_DB_PASSWORD}" \
            --schema-name "${TARGET_SCHEMA}" \
            --default-scale "${SCALE_FACTOR}" \
            --parallel-workers "${PARALLEL_WORKERS}" \
            --output-dir "/tmp/tpcds_data"
          
          echo "üîÑ Autocommit enabled in tpcds-util for transaction persistence"
          
          echo "üìã Current configuration:"
          tpcds-util config show
          echo ""
          
          # Test database connection
          echo "üîå Testing database connection..."
          tpcds-util db test
          echo ""
          
          # Create TPC-DS schema tables
          echo "üóÉÔ∏è Creating TPC-DS schema tables..."
          tpcds-util schema create --schema-file /app/oracle_tpcds_schema.sql --schema "${TARGET_SCHEMA}"
          echo ""
          
          # Generate synthetic data  
          echo "üè≠ Generating synthetic TPC-DS data..."
          tpcds-util generate data --scale "${SCALE_FACTOR}"
          echo ""
          
          # Load data into Oracle with autocommit enabled
          echo "üì§ Loading data into Oracle database with autocommit..."
          tpcds-util load data --schema "${TARGET_SCHEMA}" --parallel "${PARALLEL_WORKERS}"
          echo ""
          
          # Verify data loading
          echo "üîç Verifying data loading..."
          tpcds-util db info --schema "${TARGET_SCHEMA}"
          echo ""
          
          echo "üéâ TPC-DS data population completed successfully!"
        
        env:
        - name: TPCDS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "oracle23ai.fullname" . }}
              key: {{ .Values.tpcds.username }}_password
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ include "oracle23ai.fullname" . }}-tpcds-config
              key: database.host
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ include "oracle23ai.fullname" . }}-tpcds-config
              key: database.port
        - name: DB_SERVICE
          valueFrom:
            configMapKeyRef:
              name: {{ include "oracle23ai.fullname" . }}-tpcds-config
              key: database.service_name
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: {{ include "oracle23ai.fullname" . }}-tpcds-config
              key: database.username
        - name: TARGET_SCHEMA
          valueFrom:
            configMapKeyRef:
              name: {{ include "oracle23ai.fullname" . }}-tpcds-config
              key: schema_name
        - name: SCALE_FACTOR
          valueFrom:
            configMapKeyRef:
              name: {{ include "oracle23ai.fullname" . }}-tpcds-config
              key: scale_factor
        - name: PARALLEL_WORKERS
          valueFrom:
            configMapKeyRef:
              name: {{ include "oracle23ai.fullname" . }}-tpcds-config
              key: parallel_workers
        
        # Critical fix: Enable autocommit environment variable
        - name: ORACLE_AUTOCOMMIT
          value: "ON"
        
        volumeMounts:
        - name: tpcds-data
          mountPath: /home/tpcds/tpcds_data
        
        resources:
          requests:
            memory: "1Gi"
            cpu: "1"
          limits:
            memory: "2Gi"
            cpu: "2"

      volumes:
      - name: tpcds-data
        emptyDir:
          sizeLimit: 5Gi
{{- end }}